Deep breath... I have converted LA-MPI to use autoconf :(

------------------------------------------------------------------------

Build instructions:

1) Build in the src tree

   cvs co lampi
   cd lampi
   ./configure --enable-bproc --enable-debug --prefix=$HOME/usr
   make
   make install

2) Build in an empty directory

   cvs co lampi
   mkdir build
   cd build
   ../lampi/configure --enable-bproc --enable-debug --prefix=$HOME/usr
   make
   make install

3) ./configure --help gives of features you can enable/disable

4) By default configure uses gcc.  If you want another compiler:

   ./configure CC=cc ...
   ./configure CC=icc ...

   etc.

5) By default ROMIO is not included.  For this

   ./configure --with-romio

6) You can specify a fortran compiler (for the ROMIO build) like this

   ./configure --with-romio FC=lf77 F90=lf95

7) For a faster (parallel) build ...

   make -j32

------------------------------------------------------------------------

Maintenance instructions:

I've gone for a fairly monolithic approach here as it seems it may be
easier to maintain in the long run.

1) Key files:
     lampi/configure.ac
     lampi/config.h.in
     lampi/Makefile.in

   The configure.ac file has a case statement which sets up defaults
   for each platform.

2) If you change configure.ac, then remember to run autoconf before
   comitting.

   I have chosen the new name "configure.ac" rather that
   "configure.in" to encourage you to run autoconf on a linux box with
   a recent version.  I hope this will lead to fewer problems.

   cd lampi
   vi configure.ac
   autoconf
   cvs commit .

3) If you change Makefile.in you don NOT need to run autoconf.  The
   files are generated so:

   configure.ac ---autoconf---> configure
                --autoheader--> config.h.in
   Makefile.in  ---configure--> Makefile
   config.h.in  ---configure--> config.h

4) When incrementing the version of LA-MPI, update the string in
   AC_INIT() in configure.ac

5) config.h should be conditionally included in any source file which
   makes use of the autoconf "HAVE_<FEATURE> macros.  That is, put

   #ifdef HAVE_CONFIG_H
   #include "config.h"
   #endif

   BEFORE any other non-system #include statement.  We don't use these
   macros at the moment, but we should probably move in this direction
   -- so we might as well include config.h everywhere.
